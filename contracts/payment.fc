#include "payment/stdlib.fc";
#include "msg.fc";

global slice ctx_owner;
global int ctx_fee;

() load_data() impure {
    var ds = get_data().begin_parse();

    ctx_owner = ds~load_msg_addr();
    ctx_fee = ds~load_coins();

    ds.end_parse();
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) {
        return ();
    }

    slice sender = cs~load_msg_addr();

    load_data();

    int op = in_msg_body~load_uint(32);

    if (op == "op::transfer"c) {

        cell inner_msg = in_msg_body~load_ref();
        slice payload = inner_msg.begin_parse();
        slice recipient = payload~load_msg_addr();

        int value = my_balance - ctx_fee;
       
        msg::transfer(
            recipient,
            value
        );
    }

    elseif (op == "op:transfer_jetton_token"c) {

        cell inner_msg = in_msg_body~load_ref();
        slice payload = inner_msg.begin_parse();

        int jetton_amount = payload~load_coins();
        slice sender_jetton_wallet = payload~load_msg_addr();
        slice recipient_jetton_wallet = payload~load_msg_addr();

        int ton_value = my_balance - ctx_fee;

        msg::transfer_jetton_token(
            sender_jetton_wallet,    ;; 发送方的 Jetton 钱包地址
            recipient_jetton_wallet, ;; 接收方的 Jetton 钱包地址
            jetton_amount,           ;; 要转移的 Jetton 数量
            ton_value,               ;; 附加的 TON 数量
            my_address()             ;; 当前合约地址作为响应目标
        );
        
    }

    elseif (op == "op:swap_and_transfer"c) {                ;; Trigger swap and transfer

        slice dex_address = in_msg_body~load_msg_addr();    ;; ston-fi address
        int amount_in = in_msg_body~load_coins();           ;; 
        int min_amount_out = in_msg_body~load_coins();

        slice from_address = in_msg_body~load_msg_addr();
        slice recipient = in_msg_body~load_msg_addr();

        msg::swap_and_transfer(
            dex_address,
            token_in,
            token_out,
            amount_in, 
            min_amount_out, 
            sender,
            recipient
        );
    }
}
 
int fee() method_id {
    load_data();
    return ctx_fee;
}

slice owner() method_id {
    load_data();
    return ctx_owner;
}

cell config() method_id {
    return get_data();
}